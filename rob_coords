from cmath import inf
import pandas as pd
import re
from datetime import datetime
from dateutil.parser import parse
import math
import sympy

def read_file():
    string = open('RANDOMtextdocumentwithcoords.txt', 'r')
    string_sp = string.read()
    string_sp = string_sp.replace(',', "")
    return(string_sp)

def find_dms(string_sp):
    dms_df = pd.DataFrame
    dms_list = []
    count = 0
    counter = 0
    for dms in re.finditer('[-0-9\d{1,4}]+\N{DEGREE SIGN}+[0-9\d{2}]+\'+[0-9.\d{2,7}]+\"+\s+[-0-9\d{1,4}]+\N{DEGREE SIGN}+[0-9\d{2}]+\'+[0-9.\d{2,7}]+\"', string_sp):
        dms_date = string_sp[dms.end():dms.end()+26]
        dms_date = parse(dms_date)
        dmsID = string_sp[dms.end()+27:dms.end()+40]
        dmsID = dmsID.split()[0]
        coords = dms.group()
        counter += 1
        lat = coords.split()[0]
        long = coords.split()[1]
        dms_true = True
        dd_true = False
        dm_true = False
        dms_i = [dms.group(), lat, long, dms_date, dmsID, dms_true, dd_true, dm_true]
        dms_list.append([])
        for j in range(8):
            dms_list[count].append(dms_i[j])
        count += 1
    dms_df = pd.DataFrame(dms_list, columns = ['Coordinates', 'Lat', 'Long','Time', 'ID', 'Original DMS?', 'Original DD?', 'Original DDM?'])
    dms_df = dms_df.sort_values(by = ['ID'], ascending = True)
    return(dms_df)

def find_dd(string_sp):
    dd_df = pd.DataFrame
    dd_list = []
    count = 0
    counter = 0
    for dd in re.finditer('[-0-9\d{1,4}]+.+[0-9.\d{2,7}]+\N{DEGREE SIGN}+\s+[-0-9\d{1,4}]+.+[0-9.\d{2,7}]+\N{DEGREE SIGN}', string_sp):
        dd_date = string_sp[dd.end():dd.end()+26]
        dd_date = parse(dd_date)
        ddID = string_sp[dd.end()+27:dd.end()+40]
        ddID = ddID.split()[0]
        coords = dd.group()
        counter += 1
        lat = coords.split()[0]
        long = coords.split()[1]
        dms_true = False
        dd_true = True
        ddm_true = False
        dd_i = [dd.group(), lat, long, dd_date, ddID, dms_true, dd_true, ddm_true]
        dd_list.append([])
        for j in range(8):
            dd_list[count].append(dd_i[j])
        count += 1
    dd_df = pd.DataFrame(dd_list, columns = ['Coordinates', 'Lat', 'Long','Time', 'ID','Original DMS?', 'Original DD?', 'Original DDM?'])
    dd_df = dd_df.sort_values(by = ['ID'], ascending = True)
    return(dd_df)


def find_ddm(string_sp):
    ddm_df = pd.DataFrame
    ddm_list = []
    count = 0
    counter = 0
    for ddm in re.finditer('[-0-9\d{1,4}]+\N{DEGREE SIGN}+[0-9\d{2}]+.+[0-9\d{2,7}]+\'+\s+[-0-9\d{1,4}]+\N{DEGREE SIGN}+[0-9\d{2}]+.+[0-9\d{2,7}]+\'', string_sp):
        ddm_date = string_sp[ddm.end():ddm.end()+26]
        ddm_date = parse(ddm_date)
        ddmID = string_sp[ddm.end()+27:ddm.end()+40]
        ddmID = ddmID.split()[0]
        coords = ddm.group()
        counter += 1
        lat = coords.split()[0]
        long = coords.split()[1]
        dms_true = False
        dd_true = False
        ddm_true = True
        ddm_i = [ddm.group(), lat, long, ddm_date, ddmID, dms_true, dd_true, ddm_true]
        ddm_list.append([])
        for j in range(8):
            ddm_list[count].append(ddm_i[j])
        count += 1
    ddm_df = pd.DataFrame(ddm_list, columns = ['Coordinates', 'Lat', 'Long', 'Time', 'ID', 'Original DMS?', 'Original DD?', 'Original DDM?'])
    ddm_df = ddm_df.sort_values(by = ['ID'], ascending = True)
    return(ddm_df)

#def convert_dm(dm_df):

def convert_dms(dms_df):
    deglist = []
    deglist2 = []
    for i, row in dms_df.iterrows():
        lat = row['Lat'].replace('"','')
        long = row['Long'].replace('"','')
        bLat = re.split(r'\N{DEGREE SIGN}|\'', lat)
        bLong = re.split(r'\N{DEGREE SIGN}|\'', long)
        min = float(bLat[1])
        min2 = float(bLong[1])
        deg_m = min/60
        deg_m2 = min2/60
        sec = float(bLat[2])
        sec2 = float(bLong[2])
        deg_s = sec/3600
        deg_s2 = sec2/3600
        dLat = float(bLat[0])
        dLong = float(bLong[0])
        deg = float(dLat + deg_m + deg_s)
        deg2 = float(dLong + deg_m2 + deg_s2)
        #id = dms_df['ID'][i]
        deglist.append(deg)
        deglist2.append(deg2)
    degdf = pd.DataFrame({'DD Lat Converted': deglist, 'DD Long Converted': deglist2})
    dms_df = dms_df.join(degdf)
    return(dms_df)

def convert_dd(dd_df):
    deglist1 = []
    deglist2 = []
    for i, row in dd_df.iterrows():
        lat = row['Lat'].replace('\N{DEGREE SIGN}','')
        long = row['Long'].replace('\N{DEGREE SIGN}','')
        deglist1.append(lat)
        deglist2.append(long)
    degdf = pd.DataFrame({'DD Lat Converted': deglist1, 'DD Long Converted': deglist2})
    dd_df = dd_df.join(degdf)
    return(dd_df)

def convert_ddm(ddm_df):
    deglist = []
    deglist2 = []
    for i, row in ddm_df.iterrows():
        lat = row['Lat'].replace('"','')
        long = row['Long'].replace('"','')
        bLat = re.split(r'\N{DEGREE SIGN}|\'', lat)
        bLong = re.split(r'\N{DEGREE SIGN}|\'', long)
        min = float(bLat[1])
        min2 = float(bLong[1])
        deg_m = min/60
        deg_m2 = min2/60
        dLat = float(bLat[0])
        dLong = float(bLong[0])
        deg = float(dLat + deg_m)
        deg2 = float(dLong + deg_m2)
        deglist.append(deg)
        deglist2.append(deg2)
    degdf = pd.DataFrame({'DD Lat Converted': deglist, 'DD Long Converted': deglist2})
    ddm_df = ddm_df.join(degdf)
    return(ddm_df)

def combine_df(dd, ddm, dms):
    dd = pd.concat([dd, ddm])
    combined_df = pd.concat([dms, dd])
    combined_df = combined_df.reset_index(drop = True)
    return(combined_df)

def distance_formula(df):
    dista = []
    tim = []
    dis_df = pd.DataFrame({'Distance (DD)' : dista, 'Time elapsed' : tim})
    df = pd.concat([df, dis_df])

    for i, row in df.iterrows():
        d_df = pd.DataFrame()
        ID = row['ID']
        long_conv = float(row['DD Long Converted'])
        lat_conv = float(row['DD Lat Converted'])
        d_df = df.drop([i], inplace = False)
        time_delta = []
        indexlist = []
        for j, k in d_df.iterrows():
            time_delta.append(k['Time'] - row['Time'])
            indexlist.append(j)
        delta_df = pd.DataFrame({'Delta Time' : time_delta}, index = indexlist)
        d_df = d_df.merge(delta_df, left_index=True, right_index = True)
        for j, k in d_df.iterrows():
            wentthru = 0
            time = k['Delta Time']
            if time.total_seconds() > 0 & wentthru == 0:
                distance = 0
                if k['ID'] == row['ID']:
                    k_long = float(k['DD Long Converted'])
                    long_side = abs(long_conv - k_long)
                    k_lat = float(k['DD Lat Converted'])
                    lat_side = abs(lat_conv - k_lat)
                    distance = float(math.sqrt(long_side**2 + lat_side**2))
                    print("This is the distance for ", row['ID'], " from", row['Coordinates'], "to ", k['Coordinates'] , "with time of" , time,  ' : ' , distance)
                    df.at[i, 'Distance (DD)'] = distance
                    wentthru = 1  
            elif k['ID'] == row['ID']:
                print(df.at[i, 'Distance (DD)'])
                if math.isnan(df.at[i, 'Distance (DD)']):
                    if math.isnan(distance):
                        df.at[i, 'Distance (DD)'] = 0
                    else:
                       df.at[i, 'Distance (DD)'] = distance
        df.at[i, 'Time elapsed']= time
        #df['Distance'][row] = distance
    print("this be df :" , df)

string_sp = read_file()

dms = find_dms(string_sp)
ddm = find_ddm(string_sp)
dd = find_dd(string_sp)



dd_converted = convert_dd(dd)
ddm_converted = convert_ddm(ddm)
dms_converted = convert_dms(dms)

c_df = combine_df(dd_converted, ddm_converted, dms_converted)
distance_formula(c_df)